<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd         http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- This will automatically locate any and all property files you have within your classpath, provided they fall under 
        the META-INF/spring directory. The located property files are parsed and their values can then be used within application 
        context files in the form of ${propertyKey}. -->
    <context:property-placeholder location="classpath*:META-INF/spring/*.properties" />

    <!-- This declaration will cause Spring to locate every @Component, @Repository and @Service in your application. In 
        practical terms this allows you to write a POJO and then simply annotate the new POJO as an @Service and Spring will automatically 
        detect, instantiate and dependency inject your service at startup time. Importantly, you can then also have your new service 
        injected into any other class that requires it simply by declaring a field for your service inside the relying class and 
        Spring will inject it. Note that two exclude filters are declared. The first ensures that Spring doesn't spend time introspecting 
        Roo-specific ITD aspects. The second ensures Roo doesn't instantiate your @Controller classes, as these should be instantiated 
        by a web tier application context. Refer to web.xml for more details about the web tier application context setup services. 
        Furthermore, this turns on @Autowired, @PostConstruct etc support. These annotations allow you to use common Spring and Java 
        Enterprise Edition annotations in your classes without needing to do any special configuration. The most commonly used annotation 
        is @Autowired, which instructs Spring to dependency inject an object into your class. -->
    <context:component-scan base-package="au.org.qldjvm">
        <context:include-filter type="regex" expression=".*resource.*" />
        <context:include-filter type="regex" expression=".*service.*" />
        <context:include-filter type="regex" expression=".*spring.*" />
        <context:exclude-filter type="regex" expression=".*Test.*" />
    </context:component-scan>

    <bean id="nodeService" class="au.org.qldjvm.service.node.NodeService">
        <property name="nodes">
            <map>
                <entry>
                    <key>
                        <value>garageNode</value>
                    </key>
                    <ref bean="garageNode" />
                </entry>
                <entry>
                    <key>
                        <value>cityStationNode</value>
                    </key>
                    <ref bean="cityStationNode" />
                </entry>
            </map>
        </property>
    </bean>

    <bean id="garageNode" class="au.org.qldjvm.domain.node.DefaultNode">
        <property name="name" value="garageNode" />
        <property name="handlers">
            <list>
                <ref bean="carHandler" />
                <ref bean="trainHandler" />
            </list>
        </property>
    </bean>

    <bean id="cityStationNode" class="au.org.qldjvm.domain.node.DefaultNode">
        <property name="name" value="cityStationNode" />
        <property name="handlers">
            <list>
                <ref bean="carHandler" />
            </list>
        </property>
    </bean>

</beans>
